//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/Player Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Control"",
    ""maps"": [
        {
            ""name"": ""PlayerDefault"",
            ""id"": ""b4f47f52-9eb8-40d5-a0c2-e2f1d67ca2cb"",
            ""actions"": [
                {
                    ""name"": ""moveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""765fbd6b-87d4-4f7a-a945-7a8ec440cc5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""moveRight"",
                    ""type"": ""Button"",
                    ""id"": ""f85c8443-2f66-44cd-9106-730a03ac3d48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""aimUp"",
                    ""type"": ""Button"",
                    ""id"": ""9d125850-475d-4bf9-8f87-89ac0baccbd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""crouchDown"",
                    ""type"": ""Button"",
                    ""id"": ""3e1fbe45-bde6-4b26-a1f9-bf1f6a6569fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""83b63602-f4ec-4b6d-85be-52b18306f20e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""dash"",
                    ""type"": ""Button"",
                    ""id"": ""78585461-dff8-4eaf-b04f-79586bbedfe6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""lightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""e49fe933-9b03-449f-8c30-4c83a0eec25d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""heavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""b9403d29-9671-4921-ba28-9282ce3119b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f0182c3d-7546-49a7-a3f1-83470d8475e2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""728a9b00-859c-459d-aca1-8a7d2e3d0d25"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8de4f339-cfff-41fd-9900-9550bb8e9e1c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aimUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd405cdd-4075-4a0e-9127-7a6098aad1aa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""crouchDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64332e50-e2c0-449e-a576-0095dffe5689"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1850a879-5e43-4c1b-819d-4b3bf2ab09ea"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da36c935-734b-4342-b50a-18bc1c441d26"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""841a5568-3397-4012-a7ad-5ba609e6e7a1"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""014e5828-a6a3-4ec2-9770-7ebdeaa270b7"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""heavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33e9792a-e547-4633-b6c5-a1c0780fde12"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""heavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard Control Scheme"",
            ""bindingGroup"": ""Keyboard Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerDefault
        m_PlayerDefault = asset.FindActionMap("PlayerDefault", throwIfNotFound: true);
        m_PlayerDefault_moveLeft = m_PlayerDefault.FindAction("moveLeft", throwIfNotFound: true);
        m_PlayerDefault_moveRight = m_PlayerDefault.FindAction("moveRight", throwIfNotFound: true);
        m_PlayerDefault_aimUp = m_PlayerDefault.FindAction("aimUp", throwIfNotFound: true);
        m_PlayerDefault_crouchDown = m_PlayerDefault.FindAction("crouchDown", throwIfNotFound: true);
        m_PlayerDefault_jump = m_PlayerDefault.FindAction("jump", throwIfNotFound: true);
        m_PlayerDefault_dash = m_PlayerDefault.FindAction("dash", throwIfNotFound: true);
        m_PlayerDefault_lightAttack = m_PlayerDefault.FindAction("lightAttack", throwIfNotFound: true);
        m_PlayerDefault_heavyAttack = m_PlayerDefault.FindAction("heavyAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerDefault
    private readonly InputActionMap m_PlayerDefault;
    private IPlayerDefaultActions m_PlayerDefaultActionsCallbackInterface;
    private readonly InputAction m_PlayerDefault_moveLeft;
    private readonly InputAction m_PlayerDefault_moveRight;
    private readonly InputAction m_PlayerDefault_aimUp;
    private readonly InputAction m_PlayerDefault_crouchDown;
    private readonly InputAction m_PlayerDefault_jump;
    private readonly InputAction m_PlayerDefault_dash;
    private readonly InputAction m_PlayerDefault_lightAttack;
    private readonly InputAction m_PlayerDefault_heavyAttack;
    public struct PlayerDefaultActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerDefaultActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @moveLeft => m_Wrapper.m_PlayerDefault_moveLeft;
        public InputAction @moveRight => m_Wrapper.m_PlayerDefault_moveRight;
        public InputAction @aimUp => m_Wrapper.m_PlayerDefault_aimUp;
        public InputAction @crouchDown => m_Wrapper.m_PlayerDefault_crouchDown;
        public InputAction @jump => m_Wrapper.m_PlayerDefault_jump;
        public InputAction @dash => m_Wrapper.m_PlayerDefault_dash;
        public InputAction @lightAttack => m_Wrapper.m_PlayerDefault_lightAttack;
        public InputAction @heavyAttack => m_Wrapper.m_PlayerDefault_heavyAttack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerDefault; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerDefaultActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerDefaultActions instance)
        {
            if (m_Wrapper.m_PlayerDefaultActionsCallbackInterface != null)
            {
                @moveLeft.started -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnMoveLeft;
                @moveLeft.performed -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnMoveLeft;
                @moveLeft.canceled -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnMoveLeft;
                @moveRight.started -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnMoveRight;
                @moveRight.performed -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnMoveRight;
                @moveRight.canceled -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnMoveRight;
                @aimUp.started -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnAimUp;
                @aimUp.performed -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnAimUp;
                @aimUp.canceled -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnAimUp;
                @crouchDown.started -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnCrouchDown;
                @crouchDown.performed -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnCrouchDown;
                @crouchDown.canceled -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnCrouchDown;
                @jump.started -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnJump;
                @dash.started -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnDash;
                @dash.performed -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnDash;
                @dash.canceled -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnDash;
                @lightAttack.started -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnLightAttack;
                @lightAttack.performed -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnLightAttack;
                @lightAttack.canceled -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnLightAttack;
                @heavyAttack.started -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnHeavyAttack;
                @heavyAttack.performed -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnHeavyAttack;
                @heavyAttack.canceled -= m_Wrapper.m_PlayerDefaultActionsCallbackInterface.OnHeavyAttack;
            }
            m_Wrapper.m_PlayerDefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @moveLeft.started += instance.OnMoveLeft;
                @moveLeft.performed += instance.OnMoveLeft;
                @moveLeft.canceled += instance.OnMoveLeft;
                @moveRight.started += instance.OnMoveRight;
                @moveRight.performed += instance.OnMoveRight;
                @moveRight.canceled += instance.OnMoveRight;
                @aimUp.started += instance.OnAimUp;
                @aimUp.performed += instance.OnAimUp;
                @aimUp.canceled += instance.OnAimUp;
                @crouchDown.started += instance.OnCrouchDown;
                @crouchDown.performed += instance.OnCrouchDown;
                @crouchDown.canceled += instance.OnCrouchDown;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @dash.started += instance.OnDash;
                @dash.performed += instance.OnDash;
                @dash.canceled += instance.OnDash;
                @lightAttack.started += instance.OnLightAttack;
                @lightAttack.performed += instance.OnLightAttack;
                @lightAttack.canceled += instance.OnLightAttack;
                @heavyAttack.started += instance.OnHeavyAttack;
                @heavyAttack.performed += instance.OnHeavyAttack;
                @heavyAttack.canceled += instance.OnHeavyAttack;
            }
        }
    }
    public PlayerDefaultActions @PlayerDefault => new PlayerDefaultActions(this);
    private int m_KeyboardControlSchemeSchemeIndex = -1;
    public InputControlScheme KeyboardControlSchemeScheme
    {
        get
        {
            if (m_KeyboardControlSchemeSchemeIndex == -1) m_KeyboardControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Keyboard Control Scheme");
            return asset.controlSchemes[m_KeyboardControlSchemeSchemeIndex];
        }
    }
    public interface IPlayerDefaultActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnAimUp(InputAction.CallbackContext context);
        void OnCrouchDown(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
    }
}
